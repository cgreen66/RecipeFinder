/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', () => {\n  // Get references to various elements in the HTML\n  const searchButton = document.getElementById('search-button');\n  const ingredientInput = document.getElementById('ingredient-input');\n  const mealTypeSelect = document.getElementById('meal-type');\n  const cuisineTypeSelect = document.getElementById('cuisine-type');\n  const recipesSection = document.getElementById('recipes-section');\n  const loadingIndicator = document.getElementById('loading-indicator');\n  const errorMessage = document.getElementById('error-message');\n  const clearButton = document.getElementById('clear-button');\n\n  // Check if any required elements are missing and log an error if so\n  if (!searchButton || !ingredientInput || !mealTypeSelect || !cuisineTypeSelect || !recipesSection || !loadingIndicator || !errorMessage || !clearButton) {\n    console.error('One or more elements were not found in the document.');\n    return; // Exit the function if elements are missing\n  }\n\n  // Define a function to handle the search button click\n  const handleSearch = () => {\n    // Get user input values\n    const ingredients = ingredientInput.value;\n    const healthLabels = Array.from(document.querySelectorAll('input[name=\"health\"]:checked')).map(checkbox => checkbox.value).join(',');\n    const mealType = mealTypeSelect.value;\n    const cuisineType = cuisineTypeSelect.value;\n\n    // Call the fetchRecipes function with the user inputs\n    fetchRecipes(ingredients, healthLabels, mealType, cuisineType);\n  };\n\n  // Add a click event listener to the search button\n  searchButton.addEventListener('click', handleSearch);\n\n  // Add a keyup event listener to the ingredient input field to trigger search on Enter key press\n  ingredientInput.addEventListener('keyup', event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  });\n\n  // Add a click event listener to the clear button to reset the search and clear results\n  clearButton.addEventListener('click', () => {\n    // Clear input fields, reset checkboxes, and clear recipe section\n    ingredientInput.value = '';\n    document.querySelectorAll('input[name=\"health\"]').forEach(checkbox => checkbox.checked = false);\n    mealTypeSelect.value = '';\n    cuisineTypeSelect.value = '';\n    recipesSection.innerHTML = '';\n    errorMessage.style.display = 'none';\n    loadingIndicator.style.display = 'none';\n  });\n  const headerTitle = document.querySelector('header h1');\n  const text = headerTitle.textContent;\n  const splitText = text.split('');\n\n  // Clear the current text content\n  headerTitle.textContent = '';\n\n  // Wrap each letter in a span and add to the header\n  splitText.forEach(letter => {\n    let span = document.createElement('span');\n    span.textContent = letter;\n    headerTitle.appendChild(span);\n  });\n\n  // GSAP animation for the typing effect\n  const spans = headerTitle.querySelectorAll('span');\n  gsap.set(spans, {\n    autoAlpha: 0\n  });\n  gsap.to(spans, {\n    autoAlpha: 1,\n    duration: 0.2,\n    stagger: 0.05,\n    repeat: -1,\n    repeatDelay: 0.1,\n    yoyo: true,\n    ease: \"none\"\n  });\n});\nfunction fetchRecipes(query, health, mealType, cuisineType) {\n  const apiId = '2a21323f';\n  const apiKey = 'e33ff0b27913e1c906b2f652a9f24f33';\n  let url = new URL(`https://api.edamam.com/api/recipes/v2`);\n  let params = {\n    q: query,\n    app_id: apiId,\n    app_key: apiKey,\n    type: 'public',\n    health: health,\n    mealType: mealType,\n    cuisineType: cuisineType\n  };\n  Object.keys(params).forEach(key => params[key] && url.searchParams.append(key, params[key]));\n  const loadingIndicator = document.getElementById('loading-indicator');\n  const errorMessage = document.getElementById('error-message');\n  const recipesSection = document.getElementById('recipes-section');\n  loadingIndicator.style.display = 'block';\n  errorMessage.style.display = 'none';\n  fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    if (data.hits.length === 0) {\n      errorMessage.textContent = 'No recipes found matching the criteria.';\n      errorMessage.style.display = 'block';\n      recipesSection.innerHTML = '';\n    } else {\n      errorMessage.style.display = 'none';\n      displayRecipes(data.hits);\n    }\n    loadingIndicator.style.display = 'none';\n  }).catch(error => {\n    console.error('Fetch error:', error);\n    errorMessage.textContent = 'Failed to load recipes. Please try again.';\n    errorMessage.style.display = 'block';\n    recipesSection.innerHTML = ''; // Clear previous recipes\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction displayRecipes(recipes) {\n  const recipesSection = document.getElementById('recipes-section');\n  recipesSection.innerHTML = '';\n  recipes.forEach((recipeData, index) => {\n    const recipe = recipeData.recipe;\n    const recipeElement = document.createElement('div');\n    recipeElement.className = 'recipe-card';\n    recipeElement.innerHTML = `\n            <div class=\"recipe-image-container\">\n                <img src=\"${recipe.image}\" alt=\"${recipe.label}\" class=\"recipe-image\">\n            </div>\n            <div class=\"recipe-content\">\n                <h3 class=\"recipe-title\">${recipe.label}</h3>\n                <p class=\"recipe-source\">${recipe.source}</p>\n                <a href=\"${recipe.url}\" target=\"_blank\" class=\"view-recipe-btn\">View Recipe</a>\n            </div>\n        `;\n    const ingredientsBtn = document.createElement('button');\n    ingredientsBtn.textContent = 'Ingredients';\n    ingredientsBtn.className = 'ingredients-btn';\n    ingredientsBtn.addEventListener('click', () => showIngredients(index));\n    recipeElement.querySelector('.recipe-content').appendChild(ingredientsBtn);\n    recipeElement.dataset.ingredients = recipe.ingredientLines.join(', ');\n    recipesSection.appendChild(recipeElement);\n    const macronutrientsBtn = document.createElement('button');\n    macronutrientsBtn.textContent = 'Macronutrients';\n    macronutrientsBtn.className = 'macronutrients-btn';\n    macronutrientsBtn.addEventListener('click', () => showMacronutrients(index));\n    const buttonContainer = document.createElement('div');\n    buttonContainer.className = 'button-container';\n    buttonContainer.appendChild(ingredientsBtn);\n    buttonContainer.appendChild(macronutrientsBtn);\n    recipeElement.querySelector('.recipe-content').appendChild(buttonContainer);\n\n    // Store macronutrient data\n    recipeElement.dataset.macronutrients = JSON.stringify(recipe.totalNutrients);\n  });\n\n  // Animate recipe cards using GSAP's stagger feature\n  gsap.from(\".recipe-card\", {\n    duration: 0.5,\n    opacity: 0,\n    y: 20,\n    stagger: 0.1,\n    ease: \"power2.out\",\n    delay: 0.2 // Delay the start of the animation to allow time for data fetching\n  });\n}\n\n// Define a function to show a modal with recipe ingredients\nfunction showIngredients(index) {\n  const recipeElement = document.querySelectorAll('.recipe-card')[index];\n  const ingredients = recipeElement.dataset.ingredients;\n  showModal(ingredients);\n}\nfunction showModal(ingredients) {\n  const ingredientList = ingredients.split(', ').map(item => `<li>${item}</li>`).join('');\n  const modal = document.createElement('div');\n  modal.className = 'modal';\n  modal.innerHTML = `\n        <div class=\"modal-content\">\n            <span class=\"close\">&times;</span>\n            <ul class=\"ingredient-list\">${ingredientList}</ul>\n        </div>\n    `;\n  document.body.appendChild(modal);\n  modal.style.display = 'block'; // Set display to block before animation starts\n\n  // Animate modal content appearance with GSAP\n  gsap.fromTo('.modal-content', {\n    scale: 0.8,\n    autoAlpha: 0\n  }, {\n    scale: 1,\n    autoAlpha: 1,\n    duration: 0.5,\n    ease: \"power2.out\"\n  });\n\n  // Close button click event\n  modal.querySelector('.close').onclick = function () {\n    gsap.to('.modal-content', {\n      autoAlpha: 0,\n      scale: 0.8,\n      duration: 0.5,\n      ease: \"power2.in\",\n      onComplete: function () {\n        modal.style.display = 'none'; // Hide the modal after the animation\n        document.body.removeChild(modal); // Remove the modal from the DOM\n      }\n    });\n  };\n\n  // Clicking outside the modal content to close\n  window.onclick = function (event) {\n    if (event.target === modal) {\n      gsap.to('.modal-content', {\n        autoAlpha: 0,\n        scale: 0.8,\n        duration: 0.5,\n        ease: \"power2.in\",\n        onComplete: function () {\n          modal.style.display = 'none'; // Hide the modal after the animation\n          document.body.removeChild(modal); // Remove the modal from the DOM\n        }\n      });\n    }\n  };\n}\ndocument.querySelectorAll('button').forEach(button => {\n  button.addEventListener('mouseover', () => {\n    gsap.to(button, {\n      scale: 1.05,\n      duration: 0.2\n    });\n  });\n  button.addEventListener('mouseout', () => {\n    gsap.to(button, {\n      scale: 1,\n      duration: 0.2\n    });\n  });\n});\ndocument.querySelectorAll('#search-button, #clear-button').forEach(button => {\n  button.addEventListener('mouseenter', () => {\n    // GSAP hover animation\n    gsap.to(button, {\n      scale: 1.1,\n      duration: 0.3,\n      ease: \"power1.out\"\n    });\n  });\n  button.addEventListener('mouseleave', () => {\n    // GSAP reset animation\n    gsap.to(button, {\n      scale: 1,\n      duration: 0.3,\n      ease: \"power1.out\"\n    });\n  });\n});\nfunction showMacronutrients(index) {\n  const recipeElement = document.querySelectorAll('.recipe-card')[index];\n  const macronutrients = JSON.parse(recipeElement.dataset.macronutrients);\n  const macronutrientsContent = formatMacronutrients(macronutrients);\n  showModal(macronutrientsContent);\n}\nfunction formatMacronutrients(macronutrients) {\n  // Define a list of macronutrients to display\n  const nutrientsToShow = {\n    \"ENERC_KCAL\": \"Calories\",\n    \"PROCNT\": \"Protein\",\n    \"FAT\": \"Total Fat\",\n    \"FASAT\": \"Saturated Fat\",\n    \"CHOCDF\": \"Carbohydrates\",\n    \"FIBTG\": \"Fiber\",\n    \"SUGAR\": \"Sugars\",\n    \"CHOLE\": \"Cholesterol\",\n    \"NA\": \"Sodium\"\n  };\n  let content = '<ul class=\"macronutrient-list\">';\n  for (const key in nutrientsToShow) {\n    if (macronutrients[key]) {\n      content += `<li>${nutrientsToShow[key]}: ${macronutrients[key].quantity.toFixed(2)} ${macronutrients[key].unit}</li>`;\n    }\n  }\n  content += '</ul>';\n  return content;\n}\nfunction showHelpModal() {\n  const modal = document.createElement('div');\n  modal.className = 'modal';\n  modal.innerHTML = `\n        <div class=\"modal-content\">\n            <span class=\"close\">&times;</span>\n            <div class=\"help-content\">\n                <h2>How to Use Christopher's Recipe Finder</h2>\n                <p>\n                1. Search Recipes: Enter ingredients in the search bar and apply filters for meal type and health labels. Click \"Search\" to find recipes.<br>\n                2. Explore Recipes: Browse the recipe cards to view brief details. Click \"View Recipe\" for full instructions on the original recipe page.<br>\n                3. Ingredients & Nutrition: Click \"Ingredients\" on a recipe card for a list of ingredients. Click \"Macronutrients\" for nutritional information.<br>\n                4. Reset Search: Use the \"Clear\" button to reset the search fields and start anew.<br><br>\n                Need Assistance? Reach out for more help or information. Enjoy discovering recipes with Christopher's Recipe Finder!\n                </p>\n                <!-- Add more help content as needed -->\n            </div>\n        </div>\n    `;\n  document.body.appendChild(modal);\n  modal.style.display = 'block'; // Set display to block before animation starts\n\n  // Animate modal content appearance with GSAP\n  gsap.fromTo('.modal-content', {\n    scale: 0.8,\n    autoAlpha: 0\n  }, {\n    scale: 1,\n    autoAlpha: 1,\n    duration: 0.5,\n    ease: \"power2.out\"\n  });\n\n  // Close button click event\n  modal.querySelector('.close').onclick = function () {\n    gsap.to('.modal-content', {\n      autoAlpha: 0,\n      scale: 0.8,\n      duration: 0.5,\n      ease: \"power2.in\",\n      onComplete: function () {\n        modal.style.display = 'none'; // Hide the modal after the animation\n        document.body.removeChild(modal); // Remove the modal from the DOM\n      }\n    });\n  };\n\n  // Clicking outside the modal content to close\n  window.onclick = function (event) {\n    if (event.target === modal) {\n      gsap.to('.modal-content', {\n        autoAlpha: 0,\n        scale: 0.8,\n        duration: 0.5,\n        ease: \"power2.in\",\n        onComplete: function () {\n          modal.style.display = 'none'; // Hide the modal after the animation\n          document.body.removeChild(modal); // Remove the modal from the DOM\n        }\n      });\n    }\n  };\n}\ndocument.getElementById('help-button').addEventListener('click', showHelpModal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWNpcGVmaW5kZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;